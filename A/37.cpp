算法训练 阿尔法乘积  
时间限制：1.0s   内存限制：512.0MB
提交此题    
问题描述
　　计算一个整数的阿尔法乘积。对于一个整数x来说，它的阿尔法乘积是这样来计算的：如果x是一个个位数，那么它的阿尔法乘积就是它本身；否则的话，x的阿尔法乘积就等于它的各位非0的数字相乘所得到的那个整数的阿尔法乘积。例如：4018224312的阿尔法乘积等于8，它是按照以下的步骤来计算的：
　　4018224312 → 4*1*8*2*2*4*3*1*2 → 3072 → 3*7*2 → 42 → 4*2 → 8
　　编写一个程序，输入一个正整数（该整数不会超过6,000,000），输出它的阿尔法乘积。
　　输入格式：输入只有一行，即一个正整数。
　　输出格式：输出相应的阿尔法乘积。
　　输入输出样例
样例输入
4018224312
样例输出
8

/*
  采用递归实现，每次需要求一个数的时候，都要（转换，即函数qq(n)把一个大的数的各位进行阿尔法乘积后得到一个位数更小的值）
  层层调用，层层返回，一直从最底层返回到最高层，然后出栈结束，进行输出。
*/
#include<cstdio>
#include<iostream>
using namespace std;
int h[100];
int qq(int n){
	if(n/10==0) return n;
	int tot=0;
	while(n/10){
		h[tot++]=n%10;
		n/=10;
	}
	h[tot++]=n%10;
	int ans=1;
	for(int i=0;i<tot;i++){
		if(h[i]!=0) ans*=h[i];
	}
	return ans;
}
int solve(int n){
	int s;
	if(n/10==0){
		s=n;
	}else{
		s=solve(qq(n));
	}
	return s;
}
int main(){
	int n;
	cin>>n;
	cout<<solve(n);
}
